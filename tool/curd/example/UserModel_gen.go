// Code generated by muxi curd. DO NOT EDIT.

package model

import (
    "context"
    "fmt"
    "github.com/muxi-Infra/muxi-micro/pkg/sql"
    "golang.org/x/sync/singleflight"
    "gorm.io/gorm"
)

var group singleflight.Group

type UserModel interface {
    Create(ctx context.Context, data *User) error
    FindOne(ctx context.Context, id int64) (*User, error)
    FindByUsername(ctx context.Context, Username string) (*[]User, error)
    FindByMobile(ctx context.Context, Mobile string) (*[]User, error)
    Update(ctx context.Context, data *User) error
    Delete(ctx context.Context, id int64) error
}

type UserExec struct {
    exec      *sql.Execute
}

func NewUserModel(db *gorm.DB) *UserExec {
    exec := sql.NewExecute(User{}, db)
    return &UserExec{
        exec:      exec,
    }
}

func (u *UserExec) Create(ctx context.Context, data *User) error {
	err := u.exec.Create(ctx, data)
	if err != nil {
		return err
	}
	return nil
}

func (u *UserExec) FindOne(ctx context.Context, Id int64) (*User, error) {
	result, err, _ := group.Do(fmt.Sprintf("%s%v", "Id", Id), func() (interface{}, error) {
		var data User
		u.exec.AddWhere("Id = ?", Id)
		err := u.exec.Find(ctx, &data)
		if err != nil {
			return nil, err
		}
		if data.Id == 0 {
        	return nil, DBNotFound
        }
		return &data, nil
	})
	if result == nil {
        return nil, err
    }
	return result.(*User), err
}

func (u *UserExec) FindByUsername(ctx context.Context, Username string) (*[]User, error) {
	result, err, _ := group.Do(fmt.Sprintf("%s%v", "Username", Username), func() (interface{}, error) {
		var datas []User
		u.exec.AddWhere("Username = ?", Username)
		err := u.exec.Find(ctx, &datas)
		if err != nil {
			return nil, err
		}
		if len(datas) == 0 {
        	return nil, DBNotFound
        }
		return &datas, nil
	})
	if result == nil {
    	return nil, err
    }
	return result.(*[]User), err
}

func (u *UserExec) FindByMobile(ctx context.Context, Mobile string) (*[]User, error) {
	result, err, _ := group.Do(fmt.Sprintf("%s%v", "Mobile", Mobile), func() (interface{}, error) {
		var datas []User
		u.exec.AddWhere("Mobile = ?", Mobile)
		err := u.exec.Find(ctx, &datas)
		if err != nil {
			return nil, err
		}
		if len(datas) == 0 {
        	return nil, DBNotFound
        }
		return &datas, nil
	})
	if result == nil {
    	return nil, err
    }
	return result.(*[]User), err
}

func (u *UserExec) Update(ctx context.Context, data *User) error {
	u.exec.AddWhere("id = ?", data.Id)
	err := u.exec.Update(ctx, data)
	if err != nil {
		return err
	}
	return nil
}

func (u *UserExec) Delete(ctx context.Context, id int64) error {
	var data User
	d, err := u.FindOne(ctx, id)
	if err != nil {
		return err
	}
	data = *d
	err = u.exec.Delete(ctx, &data)
	if err != nil {
		return err
	}
	return nil
}